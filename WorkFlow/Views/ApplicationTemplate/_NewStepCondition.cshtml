@using WorkFlowLib.Data
@using WorkFlowLib.DTO
@using WorkFlowLib.Logic
@using WorkFlow.Ext
@using Resources
@{
    ViewBag.Title = "Set conditions";
    WF_FlowPropertys[] properties = ViewBag.Properties as WF_FlowPropertys[];
    int flowId = ViewBag.FlowId;
    List<SelectListItem> list = ViewBag.NextGroupList as List<SelectListItem> ?? new List<SelectListItem>();
}
@functions
{
    public IEnumerable<SelectListItem> GetGradeItems()
    {
        List<SelectListItem> items = new List<SelectListItem>();
        for (int i = 0; i <= 8; i++)
        {
            items.Add(new SelectListItem
            {
                Text = (i == 0 ? "s" : i.ToString()),
                Value = i.ToString()
            });
        }
        return items;
    }
}
@if (properties == null || properties.Length == 0)
{
    <span>Please add at least one field.</span>
}
else
{
    using (Ajax.BeginModalForm("AddNewStep", new ModalAjaxOptions
    {
        HttpMethod = "post",
        LoadingElementId = "div_progress",
        Id = "addcon_form",
        UpdateTargetId = "flowtemplate" + ViewBag.FlowId.ToString(),
        Class = "form-inline"
    }))
    {
        var DataItems = properties
            .Where(p => p.StatusId != 0)
            .Select(p => new SelectListItem
            {
                Text = p.PropertyName,
                Value = p.FlowPropertyId.ToString()
            })
            .ToList();
        DataItems.Insert(0, new SelectListItem
        {
            Text = "Applicant Grade",
            Value = string.Format("{0:d}", ExtraProperty.ApplicantGrade)
        });
        DataItems.Insert(0, new SelectListItem
        {
            Text = "Approver Grade",
            Value = string.Format("{0:d}", ExtraProperty.ApproverGrade)
        });
        //IEnumerable<SelectListItem>
        //    Grade = GetGradeItems(ViewBag.Value);
        //IEnumerable<SelectListItem>
        //    MaxGrade = GetGradeItems(ViewBag.MaxValue);

        <div class="form-group">
            <div>IF:</div>
            @Html.Hidden("flowId", flowId)
            @Html.DropDownList("DataKey", DataItems, new { @class = "form-control" })
            @Html.DropDownList("Operator", new SelectList(FlowCondition.Operators), new { @class = "form-control" })
            @Html.TextBox("Value", null, new { @class = "form-control", data_val = "true", data_val_required = "*", id = "txtValue" })
            @Html.DropDownList("Value", GetGradeItems(), StringResource.SELECT, new { @class = "form-control inline", disabled = "disabled", style = "display: none;", id = "ddlValue" })
            @Html.DropDownList("MaxValue", GetGradeItems(), StringResource.SELECT, new { @class = "form-control inline", disabled = "disabled", style = "display: none;", id = "ddlMaxValue", data_val = "true", data_val_required = "*" })
            @Html.DropDownList("NextStepGroupId", list, "Next Step", new { @class = "form-control", data_val = "true", data_val_required = "*" })
        </div>
        <div class="form-group">
            <span class="field-validation-error" style="display: none;" id="spGradeValidationMessage">
                Max grade cannot be less than min grade.
            </span>
        </div>
    }

    <script type="text/javascript">
        $("#addcon_form").removeData("validator").removeData("unobtrusiveValidation");
        $.validator.unobtrusive.parse($("#addcon_form"));

        $("#DataKey").on("change", function () {
            var value = $(this).val();
            if (value === '@((int)ExtraProperty.ApplicantGrade)' || value === '@((int)ExtraProperty.ApproverGrade)') {
                $("#ddlValue").prop("disabled", "").show();
                $("#txtValue").val("").prop("disabled", "disabled").hide();
                if ($("#Operator option:last").val() != "in") {
                    $("#Operator").append("<option value='in'>in</option>");
                }
            } else {
                $("#ddlValue").val("").prop("disabled", "disabled").hide();
                $("#ddlMaxValue").val("").prop("disabled", "disabled").hide();
                $("#txtValue").prop("disabled", "").show();
                if ($("#Operator option:last").val() == "in") {
                    $("#Operator option:last").remove();
                }
            }
        }).trigger("change");
        $("#Operator").on("change", function () {
            $("#ddlMaxValue").val("").prop("disabled", "disabled").hide();
            if ($(this).val() == "in") {
                $("#ddlMaxValue").prop("disabled", "").show();
            }
        });
        $("#ddlValue,#ddlMaxValue").on("change", function () {
            if ($("#Operator").val() !== "in") {
                return;
            }
            var minLevel = parseInt($("#ddlValue").val());
            var maxLevel = parseInt($("#ddlMaxValue").val());
            $("#addcon_form").unbind("submit");
            $("#spGradeValidationMessage").hide();
            if (!isNaN(minLevel) && !isNaN(maxLevel) && minLevel < maxLevel) {
                $("#spGradeValidationMessage").show();
                $("#addcon_form").submit(function (e) {
                    return false;
                });
            }
        });
    </script>

}
@section buttons{
    <button type="button" class="btn btn-default" data-dismiss="modal" onclick="$('#div_modal_cont').remove();">@StringResource.CANCEL</button>
    <button type="button" class="btn btn-primary" onclick="$('#div_modal_cont form').submit();">@StringResource.OK</button>
    <a data-ajax="true" class="btn btn-warning" data-ajax-method="get" data-ajax-mode="replace" data-ajax-loading="#div_progress"
       data-ajax-update="#flow_edit_@(flowId)" href="@Url.Action("AddNewStep", "ApplicationTemplate", new {flowId = ViewBag.FlowId})">
        Ignore & continue
    </a>
}